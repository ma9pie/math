import { Argument } from '@/types';
import { createTestName, decomma } from '@/utils';

describe('decomma test', () => {
  let t;

  t = function (num: Argument, expected: string) {
    test(createTestName(arguments), () => {
      expect(decomma(num)).toEqual(expected);
    });
  };

  t('', '0');
  t(0, '0');
  t('0', '0');
  t(null, '0');
  t(undefined, '0');
  t('test', '0');
  t('1,000', '1000');
  t('-2,500', '-2500');
  t('3,456.789', '3456.789');
  t('-1,234.567', '-1234.567');
  t('1,000,000,000,000', '1000000000000');
  t('0.0000000001', '0.0000000001');
  t('1.23e-5', '0.0000123');
  t(1.23e-5, '0.0000123');
  t(4e3, '4000');
  t('-1,000,000,000,000,000,000', '-1000000000000000000');
  t(1e18, '1000000000000000000');
  t(1e-18, '0.000000000000000001');
  t('1,234,567.89', '1234567.89');
  t('-9,876,543.21', '-9876543.21');
  t('0.000,001', '0.000001');
  t('1,000,000.000,001', '1000000.000001');
  t('1,2,3,4,5', '12345');
  t('1.2,3,4,5', '1.2345');
  t('1,000.', '1000');
  t('1,000,000,000.123,456,789', '1000000000.123456789');
  t(1234567.89, '1234567.89');
  t(-9876543.21, '-9876543.21');
  t(0.000001, '0.000001');
  t(1000000.000001, '1000000.000001');
  t(NaN, '0');
  t('NaN', '0');
  t('1,000e3', '1000000');
  t('1,000e-3', '1');
  t('1,000.5e3', '1000500');
  t('1,000.5e-3', '1.0005');
  t('  1,234  ', '1234');
  t('1,23,4,56,7', '1234567');
});
